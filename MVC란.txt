MVC

M: Model
V: View
C: Controller 

대략적인 진행 순서
model -> controller -> view - > user -> controller -> model

MVC사용 이유
서로 분리되어 각자의 역할에 집중할 수 있게끔 하여 개발을 하고
그렇게 애플리케이션을 만든다면, 유지보수성, 애플리케이션의 확장성, 그리고
유연성이 증가하고, 중복코딩이라는 문제점 또한 사라지게 되는 것입니다.
그러기 위한 MVC패턴

-Model
데이터와 비즈니스 로직을 관리/처리한다
사용자의 요청에 대한 업무를 처리한다
DAO(Data Access Object)등의 Java class

-View
사용자가 보게될 결과 화면을 담당한다. (레이아웃, 화면 처리 등)
HTML, JSP

-Controller
사용자의 입력 처리와 흐름을 제어하고, 사용자에게 받은 명령을 model이나 view로 라우팅한다.
사용자로부터의 입력에 대한 응답으로 모델/뷰를 업데이트하는 로직을 포함한다.
Servlet

동작 방식
사용자의 action들은 controller가 감지
Controller는 사용자의 action을 확인하고 model을 업데이트
Controller는 model을 나타내줄 view를 선택
View는 model을 이용하여 화면에 출력